typeset -U path

# This is ususally the default, but enforce our assumption
umask 022

# Editor and pager and visual
export EDITOR=vim
export PAGER=less
export VISUAL="vim"

# Defaults to dark theme, other option is LIGHT
DARK_TERM_COLOR=DARK
LIGHT_TERM_COLOR=LIGHT
DEFAULT_TERM_COLOR=$DARK_TERM_COLOR
TERM_COLOR=${TERM_COLOR:-$DEFAULT_TERM_COLOR}
export $TERM_COLOR

dark_mode() {
  export TERM_COLOR=$DARK_TERM_COLOR
}
light_mode() {
  export TERM_COLOR=$LIGHT_TERM_COLOR
}

# Enable ctrl+A and ctrl+E: https://stackoverflow.com/questions/23128353/zsh-shortcut-ctrl-a-not-working
set -o emacs

# Not working on my desktop
export DISABLE_AUTO_UPDATE=true
export ZSH=$HOME/.oh-my-zsh
export ZSH_THEME="agnoster"
plugins=(git zsh-autosuggestions zsh-syntax-highlighting)
export plugins
source $ZSH/oh-my-zsh.sh
# Overrides the color of the suggested command text
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="standout"
export ZSH_AUTOSUGGEST_USE_ASYNC=true

#
# Customize the prompt
#
# Set the computer name to Diane if on laptop, we're not allowed to actually
# change our computer's names :(
computer_name=Diane
[ -f ~/bin/isDevDesktop ] && ~/bin/isDevDesktop && computer_name=Desktop

# Overwrite prompt_context so we can change the computer names
function prompt_context() {
  original_prompt_context="%{%K{black}%}%{%F{default}%} %(!.%{%F{yellow}%}.)%n"
  echo "$original_prompt_context@$computer_name%"
}

# Put the command prompt on the 2nd line
function prompt_end_end() {
        echo "
$"
}

function build_prompt() {
        RETVAL=$?
        prompt_status
        prompt_virtualenv
        prompt_context
        prompt_dir
        prompt_git
        prompt_bzr
        prompt_hg
        prompt_end
        # Only custom part of this method:
        prompt_end_end
}
#
# End prompt customization
#

path+=(/usr/local/bin)
path+=(/usr/local/sbin)
path+=(~/bin)
# Make all path modifications persist to child processes
export PATH

# Rehash in the background to make this faster
# https://github.com/carsomyr/rbenv-bundler/issues/33
eval "$(rbenv init --no-rehash -)"
(rbenv rehash &) 2> /dev/null

# # iterm shell integration
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# only load thefuck if it is installed
which thefuck > /dev/null 2>&1 && eval $(thefuck --alias)

export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# This speeds up pasting w/ autosuggest
# https://github.com/zsh-users/zsh-autosuggestions/issues/238
pasteinit() {
  OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
  zle -N self-insert url-quote-magic # I wonder if you'd need `.url-quote-magic`?
}

pastefinish() {
  zle -N self-insert $OLD_SELF_INSERT
}
zstyle :bracketed-paste-magic paste-init pasteinit
zstyle :bracketed-paste-magic paste-finish pastefinish

alias po=popd
